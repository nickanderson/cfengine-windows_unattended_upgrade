#+Title: CFEngine Enterprise Unattended upgrade for windows

This policy works around bugs 3.10.0-4, and 3.12.0 that prevent the package
from upgrading successfully.

* Integration

In your masterfiles create =services/windows_unattended_upgrade= and place the
contents of this repository inside.

This policy should be included and executed by =standalone_self_upgrade.cf=.

Prepend this policy to =standalone_self_upgrade.cf=.

#+BEGIN_SRC diff
 # WARNING: Including this policy into the inputs of another policy may result in
 # duplicate definition of bundles.
 
+bundle common standalone_self_upgrade_file_control
+{
+  vars:
+      "inputs" slist => { "$(this.promise_dirname)$(const.dirsep)services$(const.dirsep)windows_unattended_upgrade$(const.dirsep)policy$(const.dirsep)standalone_self_upgrade.cf" };
+}
+
+body file control
+{
+        inputs => { @(standalone_self_upgrade_file_control.inputs) };
+}
+
 bundle agent main
 # @brief This bundle drives the self upgrade. It actuates the appropriate
 # bundles to download binaries to the hub for serving to clients, caching the

#+END_SRC

Add =windows= to the list of classes for =__supported_platform= in =bundle agent cfengine_software_version=.


#+BEGIN_SRC diff
       "__supported_platform"
-        or => { "redhat.!redhat_4", "centos.!centos_4", "debian", "ubuntu", "hpux", "aix" };
+        or => { "redhat.!redhat_4", "centos.!centos_4", "debian", "ubuntu", "hpux", "aix", "windows" };
#+END_SRC


Add a promise to run the =windows_unattended_upgrade= bundle after the
=methods= promise to =usebundle => cfengine_software_version_packages1;=

For example:

#+BEGIN_SRC diff
       "Manage CFEngine Version"
         usebundle => cfengine_software_version_packages1;
 
+      "Unattended Upgrade Workaround"
+        usebundle => windows_unattended_upgrade,
+        if => "windows";
+
   reports:
       !__supported_platform.inform_mode::
         "$(this.bundle) $(package_dir) is not supported";
#+END_SRC

